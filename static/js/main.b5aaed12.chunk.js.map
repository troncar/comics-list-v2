{"version":3,"sources":["components/commons/NavBar.js","components/commons/Modal.js","components/commons/Comic.js","components/commons/Filter.js","components/Comics.js","components/ComicsList.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","Modal","handleClose","show","title","description","showHideClassName","onClick","require","Comic","props","publisher","price","release_date","creators","useState","currentTitle","setCurrentTitle","currentDescription","setCurrentDescription","setShow","Fragment","document","querySelector","style","position","showModal","Filter","publishers","handlerFilter","map","index","key","type","name","value","onChange","onTouchEnd","Comics","comics","comicsLists","setComicsLists","checked","setChecked","reduce","publishersTotal","comic","indexOf","push","lenght","getPublisher","filterState","list","length","filter","buildComics","initialState","fetching","comicsList","reducer","state","action","payload","ComicList","URLCOMICS","useReducer","dispatch","useEffect","a","fetch","data","json","fetchComics","App","ComicsList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b5aaed12.chunk.js","sourcesContent":["import React from 'react';\nimport './NavBar.scss';\n\nconst NavBar = () => {\n    return (  \n        <div className=\"navBar\">\n            <div className=\"navBar__title\">News Comics</div>\n            <button className=\"navBar__items--mobile\"></button>\n        </div>\n    );\n}\n\nexport default NavBar;\n","import React from 'react';\nimport './Modal.scss';\n\n\n\nconst Modal = ({ handleClose, show, title, description }) => {\nconst showHideClassName = show ? 'modal display-block' : 'modal display-none';\n\n    return (\n    <div className={showHideClassName}>\n        <section className='modal-main'>\n            <h3>{title}</h3>\n            <div className='modal__content__container'>\n                <div className='modal__content'>\n                    {description}\n                </div>\n            </div>\n            <div className=\"modal__close\" onClick={handleClose}>\n                X\n            </div>\n        </section>\n    </div>\n    );\n};\n\nexport default Modal;\n\n","import React, {useState} from 'react';\n// Import Components\nimport Modal from './Modal';\n\n// Styles\n\nrequire('./Comic.scss');\n\n\nconst Comic = (props) => {\n    // Props\n    const {title, publisher, description, price, release_date, creators } = props;\n    // Initial States\n    const initialTitle = '';\n    const initialDescription = '';\n    const initialShow = false;\n    // UseStates \n    const [currentTitle, setCurrentTitle] = useState(initialTitle);\n    const [currentDescription, setCurrentDescription] =  useState(initialDescription);\n    const [show, setShow] = useState(initialShow);\n\n\n    function showModal (title, description)  {\n        const bodyElt = document.querySelector(\"body\");\n        bodyElt.style.position = 'fixed';\n        setCurrentTitle(title);\n        setCurrentDescription(description);\n        setShow(true);\n    }\n\n    function hideModal() {\n        const bodyElt = document.querySelector(\"body\");\n        bodyElt.style.position = 'static';\n        setShow(false);\n    }\n\n    return (\n        <React.Fragment>\n        <div className='comic'>\n            <div className='comic__container'>\n                <div className=\"comic__date\">{release_date}</div>\n                <h5>{title}</h5>\n                <div className=\"comic__creators\">{creators}</div>\n                <div className=\"comic__publisher\">{publisher}</div>\n                <div className=\"comic__description\">{description}</div>\n                <div className=\"comic__price\">{price}</div>\n                <div className=\"comic__more\" onClick={() => showModal(title,description)}>See More</div>\n            </div>\n        </div>\n        {show && (\n            <Modal \n            show={show} \n            handleClose={ () => hideModal()} \n            description={currentDescription} \n            title={currentTitle}\n            />\n        )}\n        </React.Fragment>\n    \n    )\n}\n\nexport default Comic","import React  from \"react\";\nrequire('./Filter.scss');\n\nconst Filter = props => {\n    const { publishers , handlerFilter } = props;\n\n    return (\n        <div className=\"filter\">\n            <form>\n            { publishers.map( (publisher , index) =>(\n                <label key={index}>\n                <input type=\"radio\"  name=\"option\" value={publisher} onChange={ () => handlerFilter(publisher)} onTouchEnd={handlerFilter} key={index}/>{' '}\n                    {publisher}\n                </label>\n                ))\n            }\n            </form>\n\n        </div>\n        \n    )\n}\n\nexport default Filter;","import React , {useState} from 'react';\n//Import Components\nimport Comic from './commons/Comic';\nimport Filter from './commons/Filter';\n\nrequire('./Comics.scss');\n\nconst Comics = (props) => {\n    const [comicsLists, setComicsLists] = useState(props.comics);\n    const [checked, setChecked] = useState(false);\n\n    function handlerFilter(publisher) {\n        let filterState;\n        let list = props.comics;\n        if(publisher !== 'ALL') {\n            if(comicsLists.length === 0){\n                filterState = list.filter( (comic)  => {\n                    return comic.publisher === publisher;\n                });\n            }\n            else {\n                filterState = list.filter( (comic) =>  {\n                    return comic.publisher === publisher;\n                });\n                \n            }\n        }\n        else {\n            filterState = list;\n        }\n\n        setComicsLists(filterState);\n        setChecked(!checked);\n    }\n\n    const buildComics = (comics) => {\n        if(!!comics){\n            return comics.map((comic,index) => (\n                <Comic key={`${index}--${comic.title}`} \n                title={comic.title} \n                publisher={comic.publisher}\n                description={comic.description ?comic.description : 'We dont have description for this comic :(' } \n                price={comic.price}\n                release_date={comic.release_date}\n                creators={comic.creators}/>\n            ))\n        }\n    }\n\n    const getPublisher = (comics) => {\n        // We want to reduce this comicss to only publishers without repeated data.\n        let publishers = comics.reduce((publishersTotal, comic) => {\n            // If publisher don't exist is added \n            if(publishersTotal.indexOf(comic.publisher)===-1){\n                publishersTotal.push(comic.publisher);\n            }\n            return publishersTotal;\n        }, []);\n\n        // We add the option ALL \n        if(publishers.lenght !== 0){\n            publishers =  ['ALL', ...publishers];\n        }\n\n        return publishers;\n    }\n\n\n\n    return(\n        <div className=\"containerComics comics\">\n            {props.comics  && (\n                <Filter \n                    publishers={getPublisher(comicsLists)}\n                    handlerFilter={ handlerFilter}\n                /> \n            )}\n            { buildComics(comicsLists) }\n        </div>\n    )\n}\n\nexport default Comics;","import React , {useEffect , useReducer} from 'react';\n//Import Components\nimport NavBar from './commons/NavBar';\nimport Comics from './Comics';\n\nimport './ComicsList';\n\n//Initial State Comics;\nconst initialState = {\n    fetching: true,\n    comicsList: [],\n}\n//Reducer\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'FETCH_COMICS':\n            return {\n                ...state,\n                fetching: true,\n                comicsList: []\n            };\n        case 'FETCH_COMICS_SUCCESS':\n            return{\n                ...state,\n                fetching: false,\n                comicsList: action.payload,\n            };\n        default:\n            return state;\n    }\n\n}\n\nconst ComicList = () => {\n    // EndPoint\n    const URLCOMICS = `https://cors-anywhere.herokuapp.com/https://api.shortboxed.com/comics/v1/`\n    const NEWS = 'new';\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    useEffect( () => {\n        dispatch({\n            type: 'FETCH_COMICS',\n            fetching: true,\n            payload: []\n        })\n        const fetchComics = async () => {\n            const data = await fetch(`${URLCOMICS}${NEWS}`);\n            const comics = await data.json();\n            if(!!comics && !! comics.comics){\n                dispatch({\n                    type: 'FETCH_COMICS_SUCCESS',\n                    fetching: false,\n                    payload: comics.comics\n                })\n\n            }\n        }\n        fetchComics();\n    },[URLCOMICS])\n\n    return (\n        <div className=\"container-app\">\n            <NavBar/>\n            { !state.fetching && (\n                <Comics  comics={state.comicsList}></Comics>            \n            )}\n        </div>\n \n    )\n}\n\nexport default ComicList;","import React from 'react';\nimport ComicsList from './components/ComicsList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ComicsList></ComicsList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}